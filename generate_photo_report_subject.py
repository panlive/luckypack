#!/usr/bin/env python3
"""
generate_photo_report_subject.py

-------------------------------------------------
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
    ‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –∏–∑ –ø—Ä–∞–π—Å–æ–≤ (XLS/XLSX) —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤).
    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: —Ñ–æ—Ç–æ –Ω–∞–∑–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º?), –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —à—Ç—Ä–∏—Ö–∫–æ–¥ –≤ –ø—Ä–∞–π—Å–∞—Ö?
    ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel-–æ—Ç—á—ë—Ç: 
        ‚Äî üü¢ –ï—Å—Ç—å –≤ –ø—Ä–∞–π—Å–µ –∏ –Ω–∞ –¥–∏—Å–∫–µ
        ‚Äî üü° –ï—Å—Ç—å –Ω–∞ –¥–∏—Å–∫–µ, –Ω–æ –Ω–µ—Ç –≤ –ø—Ä–∞–π—Å–µ
        ‚Äî üî¥ –ù–µ —à—Ç—Ä–∏—Ö–∫–æ–¥ (—à–ª—è–ø–∞)
    ‚Ä¢ –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –≤ logs/generate_photo_report_subject.log
    ‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ admin_notify (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    PRICES_DIR  ‚Äî –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ø—Ä–∞–π—Å–∞–º–∏
    PHOTOS_DIR  ‚Äî –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ (–ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ)
    OUTPUT_FILE ‚Äî –∏–º—è Excel-–æ—Ç—á—ë—Ç–∞

–ó–∞–ø—É—Å–∫:
    python3 generate_photo_report_subject.py
-------------------------------------------------
"""

import os
import re
import pandas as pd
import logging
from admin_notify import notify_admin

# === –ü–ê–†–ê–ú–ï–¢–†–´ ===
PRICES_DIR = "LuckyPricer/cleaned"
PHOTOS_DIR = "LuckyDownloader/data/photos"
OUTPUT_FILE = "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_—à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤.xlsx"

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
LOGS_DIR = os.getenv("LOGS_DIR", "/srv/luckypack/logs")
os.makedirs(LOGS_DIR, exist_ok=True)
LOG_FILE = os.path.join(LOGS_DIR, "generate_photo_report_subject.log")
os.makedirs(LOGS_DIR, exist_ok=True)
logging.basicConfig(
    filename=LOG_FILE,
    filemode='a',
    format='%(asctime)s [%(levelname)s] %(message)s',
    level=logging.INFO,
    encoding='utf-8'
)

def log_both(msg, level='info', critical=False):
    print(msg)
    getattr(logging, level)(msg)
    if critical:
        try:
            notify_admin(msg, module="generate_photo_report_subject.py")
        except Exception:
            pass  # –ù–µ –ø–∞–Ω–∏–∫—É–µ–º, –µ—Å–ª–∏ –∞–ª–µ—Ä—Ç –Ω–µ –ø—Ä–æ—à—ë–ª

# === –®–¢–†–ò–•–ö–û–î–´ –ò–ó –ü–†–ê–ô–°–û–í ===
def extract_barcodes_from_excel(file_path):
    barcodes = set()
    try:
        df = pd.read_excel(file_path, dtype=str, engine="openpyxl" if file_path.endswith(".xlsx") else "xlrd")
        for col in df.columns:
            values = ' '.join(df[col].dropna().astype(str))
            barcodes.update(re.findall(r'\b\d{12,13}\b', values))
    except Exception as e:
        log_both(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}", level='error', critical=True)
    return barcodes

def collect_all_barcodes(prices_dir):
    all_codes = set()
    for root, _, files in os.walk(prices_dir):
        for file in files:
            if file.endswith((".xls", ".xlsx")):
                path = os.path.join(root, file)
                all_codes |= extract_barcodes_from_excel(path)
    return all_codes

# === –§–û–¢–û –ò–ó –õ–û–ö–ê–õ–¨–ù–û–ô –ü–ê–ü–ö–ò ===
def get_local_photo_filenames(photos_dir):
    filenames = []
    for file in os.listdir(photos_dir):
        if os.path.isfile(os.path.join(photos_dir, file)):
            name, _ = os.path.splitext(file)
            filenames.append(name)
    return filenames

# === –°–†–ê–í–ù–ï–ù–ò–ï ===
def generate_report():
    log_both("üîç –ß—Ç–µ–Ω–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –∏–∑ –ø—Ä–∞–π—Å–æ–≤...")
    barcodes = collect_all_barcodes(PRICES_DIR)
    log_both(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤: {len(barcodes)}")

    log_both(f"üìÇ –ß—Ç–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ –∏–∑ {PHOTOS_DIR}...")
    photo_names = get_local_photo_filenames(PHOTOS_DIR)
    log_both(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫–µ: {len(photo_names)}")

    matched = []
    unmatched = []
    invalid = []

    for name in photo_names:
        if not re.fullmatch(r'\d{12,13}', name):
            invalid.append((name, len(name)))
        elif name in barcodes:
            matched.append((name, len(name)))
        else:
            unmatched.append((name, len(name)))

    max_len = max(len(matched), len(unmatched), len(invalid))

    def pad(lst):
        return lst + [("", "")] * (max_len - len(lst))

    df = pd.DataFrame({
        "üü¢ –ï—Å—Ç—å –≤ –ø—Ä–∞–π—Å–µ –∏ –Ω–∞ –¥–∏—Å–∫–µ": [x[0] for x in pad(matched)],
        "–î–ª–∏–Ω–∞ üü¢": [x[1] for x in pad(matched)],
        "üü° –ï—Å—Ç—å –Ω–∞ –¥–∏—Å–∫–µ, –Ω–æ –Ω–µ—Ç –≤ –ø—Ä–∞–π—Å–µ": [x[0] for x in pad(unmatched)],
        "–î–ª–∏–Ω–∞ üü°": [x[1] for x in pad(unmatched)],
        "üî¥ –ù–µ —à—Ç—Ä–∏—Ö–∫–æ–¥ (—à–ª—è–ø–∞)": [x[0] for x in pad(invalid)],
        "–î–ª–∏–Ω–∞ üî¥": [x[1] for x in pad(invalid)]
    })

    try:
        df.to_excel(OUTPUT_FILE, index=False)
        log_both(f"üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {OUTPUT_FILE}")
    except Exception as e:
        log_both(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}", level='error', critical=True)

if __name__ == "__main__":
    generate_report()