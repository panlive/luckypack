#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
handlers/prices.py ‚Äî —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´üìÑ –ü—Ä–∞–π—Å—ã¬ª

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
  ‚Ä¢ –í—Ö–æ–¥ –≤ –ø–æ–¥–º–µ–Ω—é ¬´–ü—Ä–∞–π—Å—ã¬ª (callback_data="menu_prices").
  ‚Ä¢ ¬´üì• –ü–æ–ª—É—á–∏—Ç—å Excel —Ñ–∞–π–ª—ã –≤ —á–∞—Ç¬ª ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ .xlsx –ø–∞—Ä—Ç–∏—è–º–∏ ‚â§10, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
  ‚Ä¢ ¬´‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
  ‚Ä¢ ¬´üì¶ –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ –ø–æ —Å—Å—ã–ª–∫–µ¬ª –∏ ¬´üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤ –ø–æ e-mail¬ª –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —à–∞–≥–∞–º–∏.
  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤; –ø–∏—à–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–∏ –±–æ—Ç–∞.
"""

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import os, asyncio, glob

# –ü—É—Ç—å –∫ –ø—Ä–∞–π—Å–∞–º (–ø–æ–¥–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
PRICES_DIRS = [
    "/app/LuckyPricer/data/prices",
    "/srv/luckypack/App/LuckyPricer/data/prices"
]


def pick_prices_dir():
    for d in PRICES_DIRS:
        if os.path.isdir(d):
            return d
    return None


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–º–µ–Ω—é –ü—Ä–∞–π—Å–æ–≤ ===
def get_prices_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å Excel —Ñ–∞–π–ª—ã –≤ —á–∞—Ç", callback_data="prices_chat"))
    kb.add(InlineKeyboardButton(text="üì¶ –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ –ø–æ —Å—Å—ã–ª–∫–µ", callback_data="prices_link"))
    kb.add(InlineKeyboardButton(text="üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤ –ø–æ e-mail", callback_data="prices_email"))
    kb.add(InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="prices_back"))
    return kb

# === –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –Ω–∏–∂–Ω—è—è –∫–Ω–æ–ø–∫–∞ —É –ø–æ–ª—è –≤–≤–æ–¥–∞ ===
# –ü–æ–∫–∞–∑: –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –≤–∫–ª—é—á–∞–µ–º –≤ –ª—é–±–æ–º –ø–æ–¥–º–µ–Ω—é, –¥–∞–ª—å—à–µ –æ–Ω–∞ –≤–∏—Å–∏—Ç –¥–æ –∑–∞–º–µ–Ω—ã/—É–¥–∞–ª–µ–Ω–∏—è

def get_reply_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton('üè† –ú–µ–Ω—é')]],
        resize_keyboard=True,
        one_time_keyboard=False
    )


# === –í—Ö–æ–¥ –≤ –ø–æ–¥–º–µ–Ω—é ¬´–ü—Ä–∞–π—Å—ã¬ª ===
def register_menu_prices(dp):
    async def _handle_menu_prices(callback: types.CallbackQuery):
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass
        text = "–ü—Ä–∞–π—Å—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è"
        await callback.message.answer(text, reply_markup=get_prices_menu())
        await callback.answer()
    dp.register_callback_query_handler(_handle_menu_prices, lambda c: c.data == "menu_prices")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "üì• Excel —Ñ–∞–π–ª—ã –≤ —á–∞—Ç" ===
def register_prices_chat(dp):
    from aiogram.utils.exceptions import RetryAfter

    async def _send_doc_with_retry(message, path):
        try:
            await message.answer_document(types.InputFile(path), caption=os.path.basename(path))
            return True
        except RetryAfter as e:
            await asyncio.sleep(getattr(e, "timeout", 2) + 1)
            try:
                await message.answer_document(types.InputFile(path), caption=os.path.basename(path))
                return True
            except Exception:
                return False
        except Exception:
            return False

    async def _handle_prices_chat(callback: types.CallbackQuery):
        try:
            prices_dir = pick_prices_dir()
            if not prices_dir:
                await callback.message.answer("–ù–∏–∫–∞–∫: –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–∞–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∫ –ø—Ä–∞–π—Å–∞–º.")
                await callback.answer()
                return

            files = sorted(f for f in glob.glob(os.path.join(prices_dir, "*.xlsx")) if os.path.isfile(f))
            if not files:
                await callback.message.answer("–°–µ–π—á–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–π—Å–æ–≤ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.")
                await callback.message.answer("–ï—â—ë –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∞–π—Å–∞–º–∏:", reply_markup=get_prices_menu())
                await callback.answer()
                return

            CHUNK = 10
            sent = 0
            failed = []
            for i in range(0, len(files), CHUNK):
                batch = files[i:i+CHUNK]
                for f in batch:
                    ok = await _send_doc_with_retry(callback.message, f)
                    if ok:
                        sent += 1
                        await asyncio.sleep(0.2)
                    else:
                        failed.append(os.path.basename(f))
                await asyncio.sleep(0.7)

            msg = f"üì§ –û—Ç–ø—Ä–∞–≤–∏–ª {sent} —Ñ–∞–π–ª(–æ–≤)."
            if failed:
                msg += ("\n‚ö†Ô∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: " + ", ".join(failed) +
                        "\n–°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´üì¶ –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ –ø–æ —Å—Å—ã–ª–∫–µ¬ª. ")
            await callback.message.answer(msg)
            await callback.message.answer("–ï—â—ë –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∞–π—Å–∞–º–∏:", reply_markup=get_prices_menu())
            await callback.answer()
        except Exception as e:
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∞–π—Å–æ–≤: {e}")
            await callback.message.answer("–ï—â—ë –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∞–π—Å–∞–º–∏:", reply_markup=get_prices_menu())
            await callback.answer()

    dp.register_callback_query_handler(_handle_prices_chat, lambda c: c.data == "prices_chat")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ===
def register_prices_back(dp):
    import importlib

    async def _handle_back(callback: types.CallbackQuery):
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass

        kb = None
        try:
            mm = importlib.import_module("LuckyBot.keyboards.main_menu")
            for name in ("main_menu_kb", "get_main_menu_kb", "build_main_menu", "main_menu"):
                cand = getattr(mm, name, None)
                if callable(cand):
                    kb = cand
                    break
        except Exception:
            kb = None

        if kb:
            try:
                await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb())
            except Exception:
                await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ /start.")
        else:
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∞–∂–º–∏ /start.")
        await callback.answer()

    dp.register_callback_query_handler(_handle_back, lambda c: c.data == "prices_back")


# === –û–±—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
def register(dp):
    register_menu_prices(dp)
    register_prices_chat(dp)
    register_prices_back(dp)

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
def _build_main_menu_kb():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("üìÑ –ü—Ä–∞–π—Å—ã", callback_data="menu_prices"))
    kb.add(InlineKeyboardButton("üì∑ –ü–æ–¥–±–æ—Ä –ø–æ —Ñ–æ—Ç–æ", callback_data="menu_photo"))
    kb.add(InlineKeyboardButton("üîç –ü–æ–¥–±–æ—Ä –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="menu_search"))
    kb.add(InlineKeyboardButton("üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="menu_sendorder"))
    kb.add(InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å–±–æ—Ä–∫–∞", callback_data="menu_delivery"))
    kb.add(InlineKeyboardButton("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", callback_data="menu_knowledge"))
    kb.add(InlineKeyboardButton("üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="menu_manager"))
    return kb


# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É –ø–æ–ª—è –≤–≤–æ–¥–∞ ¬´üè† –ú–µ–Ω—é¬ª ===
def register_global_home_button(dp):
    from aiogram import types as _types
    async def _home_btn(message: _types.Message):
        if message.text == 'üè† –ú–µ–Ω—é':
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=_build_main_menu_kb())
    dp.register_message_handler(_home_btn, content_types=_types.ContentTypes.TEXT)
