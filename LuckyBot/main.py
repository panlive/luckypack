#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
main.py ‚Äî –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ LuckyPackBot

-----------------------------------------------------
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
    ‚Ä¢ –ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞ LuckyPackBot (aiogram)
    ‚Ä¢ –í–µ–¥—ë—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ–ø–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–º—É–ª—å—Ç–∏ e-mail/—Ç–µ–ª–µ—Ñ–æ–Ω—ã/–∏—Å—Ç–æ—Ä–∏—è)
    ‚Ä¢ –õ–æ–≥–∏—Ä—É–µ—Ç –∏ –∞–ª–µ—Ä—Ç–∏—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ admin_notify.py
    ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—è–Ω–µ—Ç –∏–∑ config.py
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ handlers/ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ utils
-----------------------------------------------------
"""

import os, sys, json, asyncio
from dotenv import load_dotenv

# --- –ñ—ë—Å—Ç–∫–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è PYTHONPATH, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–ª—Å—è –ø–∞–∫–µ—Ç LuckyBot ---
PROJECT_ROOT = "/srv/luckypack/App"
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import TELEGRAM_BOT_TOKEN, SUPERADMIN_ID
from states.registration_states import Registration
from admin_notify import notify_admin

# --- –£—Å—Ç–æ–π—á–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π) ---
try:
    # —Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞: —Ñ—É–Ω–∫—Ü–∏—è main_menu_keyboard –≤ keyboards.main_menu
    from keyboards.main_menu import main_menu_keyboard as _raw_menu
    def main_menu_keyboard():
        return _raw_menu() if callable(_raw_menu) else _raw_menu
except Exception:
    # –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è main_menu_kb –≤ LuckyBot.keyboards.main_menu
    from LuckyBot.keyboards.main_menu import main_menu_kb as _raw_menu
    def main_menu_keyboard():
        return _raw_menu() if callable(_raw_menu) else _raw_menu
# --- –∫–æ–Ω–µ—Ü —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ ---

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv(dotenv_path=os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '.env')))

bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from LuckyBot.handlers.neighbors import register as register_neighbors
from LuckyBot.handlers.photo_pick import register as register_photo_pick
from LuckyBot.handlers import prices
register_neighbors(dp)
register_photo_pick(dp)
prices.register(dp)

# --- –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Ñ–∞–π–ª–∞—Ö ---

def load_client(user_id):
    path = f"data/clients/{user_id}.json"
    if not os.path.exists(path):
        return None
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        notify_admin(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {user_id}: {e}", module="main.py")
        return None

def save_client(client):
    path = f"data/clients/{client['user_id']}.json"
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, "w", encoding="utf-8") as f:
            json.dump(client, f, ensure_ascii=False, indent=2)
    except Exception as e:
        notify_admin(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.get('user_id', '-')}: {e}", module="main.py")

def add_history(client, event, value=None):
    client.setdefault("history", []).append({"event": event, "value": value})

def add_email(client, email):
    client.setdefault("emails", [])
    if email not in client["emails"]:
        client["emails"].append(email)
        add_history(client, "email_added", email)

def add_phone(client, phone):
    client.setdefault("phones", [])
    if phone not in client["phones"]:
        client["phones"].append(phone)
        add_history(client, "phone_added", phone)

# --- –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª ---
async def on_startup(dispatcher: Dispatcher):
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        notify_admin(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ on_startup: {e}", module="main.py")

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    try:
        client = load_client(user_id)
        name = client.get("name") if client and client.get("name") else message.from_user.first_name

        if client and client.get("is_verified"):
            import random
            greetings = [
                f"–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! üëã",
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{name}</b>!",
                f"–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞, <b>{name}</b>!",
            ]
            greet = random.choice(greetings)
            await message.answer(
                f"{greet}\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üëá",
                reply_markup=main_menu_keyboard()
            )
            return

        photo_path = os.path.join(os.path.dirname(__file__), 'media', 'start_screen.png')
        if os.path.exists(photo_path):
            await message.answer_photo(
                InputFile(photo_path),
                caption=(
                    f"<b>–°–ø–∞—Å–∏–±–æ, {name}!</b> üòä\n\n"
                    "–ß—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø—Ä–∞–π—Å—ã –∏ —Å–µ—Ä–≤–∏—Å—ã, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –æ –≤–∞—Å."
                ),
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ö†Ô∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_work"))
        await message.answer("–ù–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:", reply_markup=kb)
    except Exception as e:
        notify_admin(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}", module="main.py")

@dp.callback_query_handler(lambda c: c.data == 'start_work')
async def start_work(callback: types.CallbackQuery):
    try:
        user = callback.from_user
        client = {
            "user_id": str(user.id),
            "username": user.username,
            "name": user.first_name,
            "is_verified": False,
            "emails": [],
            "phones": [],
            "history": []
        }
        save_client(client)
        await callback.message.answer("ü§ó –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        await Registration.waiting_for_name.set()
    except Exception as e:
        notify_admin(f"–û—à–∏–±–∫–∞ –≤ start_work: {e}", module="main.py")

@dp.message_handler(state=Registration.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    try:
        client = load_client(user_id)
        name = message.text.strip()
        client["name"] = name
        add_history(client, "name_entered", name)
        save_client(client)
        prompt = (
            f"<b>–°–ø–∞—Å–∏–±–æ, {name}!</b> üòä\n\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (PDF, Word, —Ñ–æ—Ç–æ), –ò–ù–ù (10‚Äì12 —Ü–∏—Ñ—Ä), —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ e-mail."
        )
        await message.answer(prompt, parse_mode="HTML")
        await Registration.waiting_for_identification.set()
    except Exception as e:
        notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_name: {e}", module="main.py")

@dp.message_handler(state=Registration.waiting_for_identification, content_types=['document','photo','text'])
async def process_identification(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    try:
        client = load_client(user_id)
        text = message.text.strip() if message.content_type == 'text' else ""

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ò–ù–ù (10-12 —Ü–∏—Ñ—Ä) ---
        if text.isdigit() and 10 <= len(text) <= 12:
            client["inn"] = text
            add_history(client, "inn_entered", text)
            client["is_verified"] = True
            save_client(client)
            await message.answer("‚úÖ –ò–ù–ù –ø–æ–ª—É—á–µ–Ω. –í—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.")
            await state.finish()
            await message.answer("–ß–µ–º –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ? üëá", reply_markup=main_menu_keyboard())
            return

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ email ---
        if "@" in text and "." in text:
            add_email(client, text)
            client["is_verified"] = True
            save_client(client)
            await message.answer("–°–ø–∞—Å–∏–±–æ, e-mail —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
            await state.finish()
            return

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
        if "+" in text or (text.isdigit() and len(text) in (10, 11)):
            add_phone(client, text)
            client["is_verified"] = True
            save_client(client)
            await message.answer("–°–ø–∞—Å–∏–±–æ, —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
            await state.finish()
            return

        # --- –î–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ ---
        if message.document or message.photo:
            add_history(client, "card_uploaded", "—Ñ–∞–π–ª")
            client["is_verified"] = True
            save_client(client)
            await message.answer("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –í—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.")
            await state.finish()
            await message.answer("–ß–µ–º –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ? üëá", reply_markup=main_menu_keyboard())
            return

        await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF, Word, —Ñ–æ—Ç–æ –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10‚Äì12 —Ü–∏—Ñ—Ä), —Ç–µ–ª–µ—Ñ–æ–Ω, e-mail.")
    except Exception as e:
        notify_admin(f"–û—à–∏–±–∫–∞ –≤ process_identification: {e}", module="main.py")

if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    except Exception as e:
        notify_admin(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", module="main.py")
# dev-reload-test Sat Sep 13 10:59:21 PM MSK 2025
# touch Sat Sep 13 11:09:51 PM MSK 2025
