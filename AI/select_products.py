#!/usr/bin/env python3
"""
select_products.py ‚Äî –°–º—ã—Å–ª–æ–≤–æ–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT-4o, —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

-----------------------------------------------------
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
    ‚Ä¢ –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ —Å–≤–æ–±–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ LuckyPack.
    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI GPT-4o –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ª—é–±—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ (–æ—à–∏–±–∫–∏, —Å–ª–µ–Ω–≥, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å).
    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–º—ã—Å–ª—É: —Ü–≤–µ—Ç, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Ç—Ç–µ–Ω–∫–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
    ‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ logs/select_products.log.
    ‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ (—Å–±–æ–∏ OpenAI, –ø–∞—Ä—Å–∏–Ω–≥, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö) –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω—É LuckyPackBot –≤ Telegram (—á–µ—Ä–µ–∑ admin_notify.py).
    ‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç: –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∏—Ç—Å—è –≤—Ä—É—á–Ω—É—é, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ selected.json.

–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —à–∞–≥ –∑–∞ —à–∞–≥–æ–º:
    1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ JSON-—Ñ–∞–π–ª—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ LuckyPricer/data/jsons/.
    2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ª—é–±–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ).
    3. –§–æ—Ä–º–∏—Ä—É–µ—Ç –º–æ—â–Ω—ã–π PROMPT –¥–ª—è GPT-4o, —á—Ç–æ–±—ã AI –ø–æ–Ω–∏–º–∞–ª —Å–º—ã—Å–ª –¥–∞–∂–µ –Ω–µ—è–≤–Ω—ã—Ö –∏ ‚Äú–∫—Ä–∏–≤—ã—Ö‚Äù —Å–æ–æ–±—â–µ–Ω–∏–π.
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–µ 100 —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT-4o.
    5. –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç GPT-4o –º–∞—Å—Å–∏–≤ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (JSON).
    6. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ LuckyPricer/data/selected.json.
    7. –í—Å–µ —ç—Ç–∞–ø—ã –∏ –æ—à–∏–±–∫–∏ –ø–∏—à—É—Ç—Å—è –≤ logs/select_products.log.
    8. –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –∞–¥–º–∏–Ω—É –≤ Telegram.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    ‚Äî –§–∞–π–ª admin_notify.py –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.
    ‚Äî –í .env –ø—Ä–æ–ø–∏—Å–∞–Ω—ã OPENAI_API_KEY, TELEGRAM_BOT_TOKEN, SUPERADMIN_ID.
    ‚Äî –ö–∞—Ç–∞–ª–æ–≥ logs/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).
    ‚Äî –ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –ª—é–±–æ–π —Å—Ä–µ–¥—ã (—Ç–µ—Ä–º–∏–Ω–∞–ª VSCode, ssh –∏ —Ç.–¥.)

–ê–≤—Ç–æ—Ä: LuckyPackProject / 2025
-----------------------------------------------------
"""
import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import os
import json
import datetime
from dotenv import load_dotenv
import openai
import traceback

from admin_notify import notify_admin

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∫–ª—é—á–µ–π ---
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    err_msg = "‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env"
    print(err_msg)
    notify_admin(err_msg)
    raise RuntimeError(err_msg)
openai.api_key = api_key

# --- –ü—É—Ç–∏ ---
BASE = os.path.dirname(os.path.abspath(__file__))
JSON_DIR = os.path.normpath(os.path.join(BASE, "..", "LuckyPricer", "data", "jsons"))
OUTPUT_PATH = os.path.normpath(os.path.join(BASE, "..", "LuckyPricer", "data", "selected.json"))
LOG_DIR = os.getenv("LOGS_DIR", "/srv/luckypack/logs")
os.makedirs(LOG_DIR, exist_ok=True)
LOG_PATH = os.path.join(LOG_DIR, "select_products.log")

os.makedirs(LOG_DIR, exist_ok=True)

def write_log(msg):
    ts = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(LOG_PATH, "a", encoding="utf-8") as logf:
        logf.write(f"[{ts}] {msg}\n")

def main():
    try:
        # --- –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        query = input("üó£Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—Ä–∞—Å–Ω–∞—è –ø–ª—ë–Ω–∫–∞ –∏ –±–µ–∂–µ–≤—ã–π —Ñ–æ–∞–º–∏—Ä–∞–Ω):\n> ")
        write_log(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {query}")

        # --- –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã ---
        products = []
        loaded_files = 0
        for fname in os.listdir(JSON_DIR):
            if fname.endswith(".json"):
                try:
                    with open(os.path.join(JSON_DIR, fname), "r", encoding="utf-8") as f:
                        loaded = json.load(f)
                        products.extend(loaded)
                        loaded_files += 1
                except Exception as e:
                    err_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ {fname}: {e}"
                    print(err_msg)
                    write_log(err_msg)
                    notify_admin(err_msg)

        write_log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)} –∏–∑ {loaded_files} —Ñ–∞–π–ª–æ–≤.")

        if not products:
            err_msg = "‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞!"
            print(err_msg)
            write_log(err_msg)
            notify_admin(err_msg)
            return

        # --- PROMPT –¥–ª—è GPT-4o ---
        system_prompt = """
–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É —É–ø–∞–∫–æ–≤–∫–∏.
–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç) –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª, —á—Ç–æ –∏—â–µ—Ç ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç: —Å –æ—à–∏–±–∫–∞–º–∏, —Å–ª–µ–Ω–≥–æ–º, –æ–ø–µ—á–∞—Ç–∫–∞–º–∏, —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏ –∏–ª–∏ –Ω–µ–æ–±—ã—á–Ω–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π.
–ò–≥–Ω–æ—Ä–∏—Ä—É–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, –ø–æ–Ω–∏–º–∞–π —Å–º—ã—Å–ª –¥–∞–∂–µ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø—Ä–æ—Å—É –ø–æ —Å–º—ã—Å–ª—É, —Ü–≤–µ—Ç—É, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é, –æ—Ç—Ç–µ–Ω–∫–∞–º, –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ —Ç–æ—á–Ω–æ–µ.

–û—Ç–¥–∞–π –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ JSON-–æ–±—ä–µ–∫—Ç–æ–≤ (–±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤).

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: "–ú–Ω–µ –±—ã —á—Ç–æ-—Ç–æ —Ä–æ–∑–æ–≤–æ–µ, –∫–∞–∫ –∑–µ—Ñ–∏—Ä, –Ω–æ –Ω–µ —è—Ä–∫–æ–µ –∏ –Ω–µ –º–∞—Ç–æ–≤–æ–µ, —á—Ç–æ–±—ã –Ω–∞ 8 –º–∞—Ä—Ç–∞ –ø–æ–¥–æ—à–ª–æ".
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–Ω—è—Ç—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –∏—â–µ—Ç —Å–≤–µ—Ç–ª–æ-—Ä–æ–∑–æ–≤—ã–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –∏–ª–∏ –≥–ª—è–Ω—Ü–µ–≤—ã–µ —É–ø–∞–∫–æ–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ –≤–µ—Å–µ–Ω–Ω–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ JSON (–º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤).
""".strip()

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {query}\n\n–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n{json.dumps(products[:100], ensure_ascii=False)}"}
        ]

        # --- –ó–∞–ø—Ä–æ—Å –∫ OpenAI GPT-4o ---
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                temperature=0.3,
                messages=messages
            )
        except Exception as e:
            err_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenAI: {e}"
            print(err_msg)
            write_log(err_msg)
            write_log(traceback.format_exc())
            notify_admin(err_msg)
            return

        reply = response["choices"][0]["message"]["content"]

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
        try:
            result = json.loads(reply)
            with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(result)}")
            print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {OUTPUT_PATH}")
            write_log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(result)}. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {OUTPUT_PATH}")
        except Exception as e:
            err_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT: {e}"
            print(err_msg)
            print("–û—Ç–≤–µ—Ç GPT:\n", reply)
            write_log(err_msg)
            write_log(f"–û—Ç–≤–µ—Ç GPT:\n{reply}")
            write_log(traceback.format_exc())
            notify_admin(err_msg)
    except Exception as e:
        err_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(err_msg)
        write_log(err_msg)
        write_log(traceback.format_exc())
        notify_admin(err_msg)

if __name__ == "__main__":
    main()